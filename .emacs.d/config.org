#+STARTUP: hideblocks
* Coding system
  Setting utf-8 as default codec.
  Call to [[help:set-default-coding-systems][set-default-coding-systems]] assings value to common coding variables.
  #+begin_src emacs-lisp
    (set-default-coding-systems 'utf-8)
  #+end_src
* Default theme
  These one is used in terminals
  #+begin_src emacs-lisp
    (load-theme 'tango-dark)
  #+end_src
* Hide tool bar
  #+begin_src emacs-lisp
    (if window-system
        (tool-bar-mode -1))
  #+end_src

* Additional repos
  Additional package repositories
  #+begin_src emacs-lisp
    (require 'package)
    
    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.milkbox.net/packages/") t)
    (add-to-list 'package-archives
                 '("marmalade" . "http://marmalade-repo.org/packages/"))
  #+end_src
  
* Backup files setup
  Set temp dir outside of `~/.emacs.d`.
  Keep all files in tmp dir only for a week.
  #+begin_src emacs-lisp
    (setq auto-save-list-file-prefix
          (concat temporary-file-directory "save-"))
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
    
    (message "Deleting old backup files...")
    (let ((week (* 60 60 24 7))
          (current (float-time (current-time))))
      (dolist (file (directory-files temporary-file-directory t))
        (when (and (backup-file-name-p file)
                   (> (- current (float-time (fifth (file-attributes file))))
                      week))
          (message "%s" file)
          (delete-file file))))
  #+end_src

* Flymake
  Here is only initialization of the mode. Specific tuning is placed inside languages configs
  #+begin_src emacs-lisp
    (add-hook 'find-file-hook 'flymake-find-file-hook)
    
    (eval-after-load "flymake"
      '(progn
         (local-set-key "\M-n" 'flymake-goto-next-error)
         (local-set-key "\M-p" 'flymake-goto-prev-error)))
  #+end_src

  To remove annoying errors while typing code we do not check on a new line
  and increasing default check timeout:
  #+begin_src emacs-lisp
    (setf flymake-no-changes-timeout 20
          flymake-start-syntax-check-on-newline nil)
  #+end_src
* Whitespaces and tabs
  Show all trailing whitespaces. Show tabs.
  Use spaces over tabs. Show trailing empty lines.
  #+begin_src emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default indicate-empty-lines t)
    (setq show-trailing-whitespace t)
    (autoload 'whitespace-mode
      "whitespace"
      "Toggle whitespace visualization."
      t)
    (autoload 'whitespace-toggle-options
      "whitespace"
      "Toggle local `whitespace-mode' options."
      t)
    (setq whitespace-style '(face trailing tabs empty tab-mark))
    (add-hook 'prog-mode-hook #'(lambda () (whitespace-mode t)))
  #+end_src

* Tramp
  Using ssh as a transport
  #+begin_src emacs-lisp
    (setq tramp-default-method "ssh")
  #+end_src
* Python
  Using `pyflakes` for syntax cheching.
  #+begin_src emacs-lisp
    (defun flymake-pyflakes-init ()
      (let* ((temp-file (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-inplace))
             (local-file (file-relative-name
                          temp-file
                          (file-name-directory buffer-file-name))))
        (list "pyflakes" (list local-file))))
    
    (eval-after-load "flymake"
      '(add-to-list 'flymake-allowed-file-name-masks
                    '("\\.py\\'" flymake-pyflakes-init)))
    
  #+end_src
* Gnutls
  Use default security level of the Diffie-Hellman key exchange
  #+begin_src emacs-lisp
    (setq gnutls-min-prime-bits nil)
  #+end_src

  Define helper function which adds certs file on mac os.
  Right now it is curl crt file
  #+begin_src emacs-lisp
    (defun add-curl-crt-bundle-to-gnutls-trustfiles ()
      (let ((f "/opt/local/share/curl/curl-ca-bundle.crt"))
        (when (and (eq system-type 'darwin) (file-exists-p f))
            (add-to-list 'gnutls-trustfiles f))))
  #+end_src
* Custom packages
  Keep list of packages that needs to be installed
  and updated
  #+begin_src emacs-lisp
        (package-initialize)
        
        (defvar emacs-pkgs
          '(ahg
            sml-mode
            scala-mode
            haskell-mode
            company))
        
        (mapc
         (lambda (package)
           (or (package-installed-p package)
               (if (y-or-n-p (format "Package %s is missing. Install it? " package))
                   (package-install package))))
         emacs-pkgs)
  #+end_src
** Solarized
  #+begin_src emacs-lisp
    (if (display-graphic-p)
        (progn
          (load-theme 'solarized-dark t)
          (setq solarized-distinct-fringe-background t
                solarized-high-contrast-mode-line t)))
  #+end_src
** Haskell
   Setting initials for `haskell-mode`
   #+begin_src emacs-lisp
     (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
     (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
     (add-hook 'haskell-mode-hook 'flymake-haskell-multi-load)
   #+end_src
** clojure
   CIDER IDE
   #+begin_src emacs-lisp
     (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
     (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
     (setq nrepl-hide-special-buffers t)
   #+end_src
** aHg
   Mercurial related package
   #+begin_src emacs-lisp
     (require 'ahg)
   #+end_src
** scala
*** ensime
    Start ensime server on scala mode init
    #+begin_src emacs-lisp
      (require 'ensime)
      (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
    #+end_src
** jabber
   Using multiple accounts
   #+begin_src emacs-lisp
     (setq jabber-account-list
           '(("riffm@rnd.stcnet.ru"
              (:network-server . "rnd.stcnet.ru")
              (:connection-type . network))
             ("riffm@jabber.ru/emacs"
              (:network-server . "jabber.ru")
              (:connection-type . ssl)
              (:port . 5223))))
     
     (defun jabber ()
       (interactive)
       (require 'gnutls)
       (add-curl-crt-bundle-to-gnutls-trustfiles)
       (jabber-connect-all))
   #+end_src
** coffeescript
   Set indentation
   #+begin_src emacs-lisp
     (setq coffee-tab-width 2)
   #+end_src
* Mail
** smtp
  Using `msmtp` as a smtp client program
  #+begin_src emacs-lisp
    (setq message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "msmtp"
          user-full-name "Tim Perevezentsev")
  #+end_src

  Next we set hook to select mail account depending on `from` header
  #+begin_src emacs-lisp
    (defun choose-msmtp-account ()
      (if (message-mail-p)
          (save-excursion
            (let*
                ((from (save-restriction
                         (message-narrow-to-headers)
                         (message-fetch-field "from")))
                 (account
                  (cond
                   ((string-match "riffm2005@gmail.com" from) "riffm2005")
                   ((string-match "riffm@stmdev.ru" from) "stmdev")
                   ((string-match "me@riffm.name" from) "riffm-name")
                   ((string-match "riffm@rnd.stcnet.ru" from) "riffm-stcnet"))))
              (setq message-sendmail-extra-arguments (list '"-a" account))))))
    
    (setq message-sendmail-envelope-from 'header)
    (add-hook 'message-send-mail-hook 'choose-msmtp-account)
  #+end_src
